/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import org.json.JSONObject;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

public class App {

    private static final String BUILD_DIR = "build";
    private static final String BUILD_CONFIG_FILE = "build.json";
    private static final String ITEMS_PROPERTY = "include";
    private static final String ZIP_DIR = "zip";
    private static final String ZIP_FILENAME = "build";
    private static final String ZIP_FILE_EXTENSION = "zip";

    private static boolean isDebugEnabled = false;

    public static void main(String[] args) throws IOException {

        App.isDebugEnabled = Arrays.asList(args).contains("--debug");

        if (Files.notExists(Paths.get(BUILD_CONFIG_FILE))) {
            throw new FileNotFoundException("There is not build configuration file named build.json at this directory");
        }

        var fileConfigContent = Files.readString(Paths.get(BUILD_CONFIG_FILE));

        var jsonContent = new JSONObject(fileConfigContent);

        var currentWorkingDir = System.getProperty("user.dir");


        Path buildDirPath = Paths.get(jsonContent.optString("outputDir", BUILD_DIR));

        if (Files.exists(buildDirPath)) {
            deleteRecursively(buildDirPath);
        }

        Files.createDirectory(buildDirPath);


        var items = jsonContent.getJSONArray(ITEMS_PROPERTY);

        for (int i = 0; i < items.length(); i++) {
            var item = (String) items.get(i);

            copyRecursively(currentWorkingDir, item);

        }

        Path zipDirPath = Paths.get(jsonContent.optString("zipDir", ZIP_DIR));

        if (Files.exists(zipDirPath)) {
            deleteRecursively(zipDirPath);
        }

        Files.createDirectory(zipDirPath);

        Path zipFilenamePath = Paths.get(ZIP_DIR + File.separator + jsonContent.optString("zipFilename", ZIP_FILENAME) + "." + ZIP_FILE_EXTENSION);

        zipRecursively(buildDirPath, zipFilenamePath);

    }

    public static void copyRecursively(final String sourceDir, final String item) throws IOException {

        var fullSource = Paths.get(sourceDir + File.separator + item);

        var fullTarget = Paths.get(BUILD_DIR + File.separator + item);

        if (!Files.isDirectory(fullSource)) {
            Files.copy(fullSource, fullTarget);
            return;
        }

        if (App.isDebugEnabled) {
            Files.walk(fullSource)
                    .forEach(System.out::println);
        }

        Files.walk(fullSource)
                .forEach(subSourcePath -> {

                    try {

                        if (fullSource.toString().equals(subSourcePath.toString())) {

                            Files.createDirectory(fullTarget);
                            return;
                        }

                        var relativeItem = fullSource.relativize(subSourcePath);

                        var fullSubTarget = fullTarget.resolve(relativeItem);

                        if (!Files.isDirectory(subSourcePath)) {
                            Files.copy(subSourcePath, fullSubTarget);
                            return;
                        }

                        Files.createDirectories(fullSubTarget);

                    } catch (Exception e) {
                        throw new RuntimeException(e);
                    }
                });

    }

    private static void deleteRecursively(Path path) throws IOException {

        if (!Files.isDirectory(path)) {
            Files.delete(path);
            return;
        }

        Files.walk(path)
                .forEach(subPath -> {
                    if (subPath.toString().equals(path.toString())) {
                        return;
                    }

                    try {
                        deleteRecursively(subPath);
                    } catch (IOException e) {
                        throw new RuntimeException(e);
                    }
                });

        Files.delete(path);

    }

    private static void zipRecursively(Path source, Path targetFile) throws IOException {
        var fileList =
                Files.walk(source)
                        .filter(subPath -> !Files.isDirectory(subPath))
                        .toList();

        var zipOutputStream = new ZipOutputStream(new FileOutputStream(targetFile.toFile()));

        fileList.forEach(filename -> {
            var relativeFilename = filename.toString().replace(source.toString(), "");
            var zipEntry = new ZipEntry(relativeFilename);

            try {
                zipOutputStream.putNextEntry(zipEntry);

                try (var inputStream = Files.newInputStream(filename);) {
                    byte[] buffer = new byte[1024];
                    int len;

                    while ((len = inputStream.read(buffer)) > 0) {
                        zipOutputStream.write(buffer, 0, len);
                    }

                }

                zipOutputStream.closeEntry();

            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        });

        zipOutputStream.close();
    }

}
